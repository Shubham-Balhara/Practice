--------------------------Question------------------------------------------------------
Given a grid with each cell consisting of positive, negative or no points i.e, zero points. We can move across a cell only if we have positive points ( > 0 ). Whenever we pass through a cell, points in that cell are added to our overall points. We need to find minimum initial points to reach cell (m-1, n-1) from (0, 0).

Constraints :

From a cell (i, j) we can move to (i+1, j) or (i, j+1).
We cannot move from (i, j) if your overall points at (i, j) is <= 0.
We have to reach at (n-1, m-1) with minimum positive points i.e., > 0.
Example:

Input: points[m][n] = { {-2, -3,   3}, 
                        {-5, -10,  1}, 
                        {10,  30, -5} 
                      };
Output: 7
Explanation: 
7 is the minimum value to reach destination with 
positive throughout the path. Below is the path.

(0,0) -> (0,1) -> (0,2) -> (1, 2) -> (2, 2)

We start from (0, 0) with 7, we reach(0, 1) 
with 5, (0, 2) with 2, (1, 2) with 5, (2, 2)
with and finally we have 1 point (we needed 
greater than 0 points at the end). 
-----------------------------------------------code------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int n,m;
int a[50][50];

int calpoint(){
    int sol[n][m];
    int rem = 1;
    if((rem-a[n-1][m-1])<=0){
        sol[n-1][m-1] = 1;
    }else{
        sol[n-1][m-1] = rem-a[n-1][m-1];
    }
    for(int i=n-2;i>=0;i--){
        rem = sol[i+1][m-1];
        if((rem-a[i][m-1])<=0){
            sol[i][m-1] = 1;
        }else{
            sol[i][m-1] = rem-a[i][m-1];
        }
    }
    for(int i=m-2;i>=0;i--){
        rem = sol[n-1][i+1];
        if((rem-a[n-1][i])<=0){
            sol[n-1][i] = 1;
        }else{
            sol[n-1][i] = rem-a[n-1][i];
        }
    }
    for(int i=n-2;i>=0;i--){
        for(int j=m-2;j>=0;j--){
            rem = min(sol[i+1][j],sol[i][j+1]);
            if((rem-a[i][j])<=0){
                sol[i][j] = 1;
            }else{
                sol[i][j] = rem-a[i][j];
            }
        }
    }
    return sol[0][0];
}

int main(){
    int t;
    cin>>t;
    while(t--){
        cin>>n>>m;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                cin>>a[i][j];
        cout<<calpoint()<<endl;
    }
}
---------------------------------------Link--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/minimum-positive-points-to-reach-destination/
